//this script provides conversion between code points and strings.
//By Chen_yu_xuan

//ord
//based on the base64 standard
__map={'='->[], 'A'->[0, 0, 0, 0, 0, 0], 'B'->[0, 0, 0, 0, 0, 1], 'C'->[0, 0, 0, 0, 1, 0], 'D'->[0, 0, 0, 0, 1, 1], 'E'->[0, 0, 0, 1, 0, 0], 'F'->[0, 0, 0, 1, 0, 1], 'G'->[0, 0, 0, 1, 1, 0], 'H'->[0, 0, 0, 1, 1, 1], 'I'->[0, 0, 1, 0, 0, 0], 'J'->[0, 0, 1, 0, 0, 1], 'K'->[0, 0, 1, 0, 1, 0], 'L'->[0, 0, 1, 0, 1, 1], 'M'->[0, 0, 1, 1, 0, 0], 'N'->[0, 0, 1, 1, 0, 1], 'O'->[0, 0, 1, 1, 1, 0], 'P'->[0, 0, 1, 1, 1, 1], 'Q'->[0, 1, 0, 0, 0, 0], 'R'->[0, 1, 0, 0, 0, 1], 'S'->[0, 1, 0, 0, 1, 0], 'T'->[0, 1, 0, 0, 1, 1], 'U'->[0, 1, 0, 1, 0, 0], 'V'->[0, 1, 0, 1, 0, 1], 'W'->[0, 1, 0, 1, 1, 0], 'X'->[0, 1, 0, 1, 1, 1], 'Y'->[0, 1, 1, 0, 0, 0], 'Z'->[0, 1, 1, 0, 0, 1], 'a'->[0, 1, 1, 0, 1, 0], 'b'->[0, 1, 1, 0, 1, 1], 'c'->[0, 1, 1, 1, 0, 0], 'd'->[0, 1, 1, 1, 0, 1], 'e'->[0, 1, 1, 1, 1, 0], 'f'->[0, 1, 1, 1, 1, 1], 'g'->[1, 0, 0, 0, 0, 0], 'h'->[1, 0, 0, 0, 0, 1], 'i'->[1, 0, 0, 0, 1, 0], 'j'->[1, 0, 0, 0, 1, 1], 'k'->[1, 0, 0, 1, 0, 0], 'l'->[1, 0, 0, 1, 0, 1], 'm'->[1, 0, 0, 1, 1, 0], 'n'->[1, 0, 0, 1, 1, 1], 'o'->[1, 0, 1, 0, 0, 0], 'p'->[1, 0, 1, 0, 0, 1], 'q'->[1, 0, 1, 0, 1, 0], 'r'->[1, 0, 1, 0, 1, 1], 's'->[1, 0, 1, 1, 0, 0], 't'->[1, 0, 1, 1, 0, 1], 'u'->[1, 0, 1, 1, 1, 0], 'v'->[1, 0, 1, 1, 1, 1], 'w'->[1, 1, 0, 0, 0, 0], 'x'->[1, 1, 0, 0, 0, 1], 'y'->[1, 1, 0, 0, 1, 0], 'z'->[1, 1, 0, 0, 1, 1], '0'->[1, 1, 0, 1, 0, 0], '1'->[1, 1, 0, 1, 0, 1], '2'->[1, 1, 0, 1, 1, 0], '3'->[1, 1, 0, 1, 1, 1], '4'->[1, 1, 1, 0, 0, 0], '5'->[1, 1, 1, 0, 0, 1], '6'->[1, 1, 1, 0, 1, 0], '7'->[1, 1, 1, 0, 1, 1], '8'->[1, 1, 1, 1, 0, 0], '9'->[1, 1, 1, 1, 0, 1], '+'->[1, 1, 1, 1, 1, 0], '/'->[1, 1, 1, 1, 1, 1]};



// U-00000000 … U-0000007F | 0xxxxxxx 
// U-00000080 … U-000007FF | 110xxxxx 10xxxxxx 
// U-00000800 … U-0000FFFF | 1110xxxx 10xxxxxx 10xxxxxx 
// U-00010000 … U-0010FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 

ord(char,outer(__map))->(
    blist=[];
    for(split(encode_b64(char)),
        put(blist, null, __map:_, 'extend')
    );
    //print(blist);
    firstZero=first(blist,if(!_,break(_i)));
    digs=if(length(blist)==2*6 &&firstZero==0,[1,2,3,4,5,6,7],
    length(blist)==3*6&&firstZero==2,[3,4,5,6,7,10,11,12,13,14,15],
    length(blist)==4*6&&firstZero==3,[4,5,6,7,10,11,12,13,14,15,18,19,20,21,22,23],
    length(blist)==6*6&&firstZero==4,[5,6,7,10,11,12,13,14,15,18,19,20,21,22,23,26,27,28,29,30,31],
    return('ERROR!!')
    );
    res=0;
    for(digs,
    res=res*2;
    res=res+blist:_
    );
    res
);

ord_string(str)->(
    if (length(str)<=1,return(map(split(str),ord(_))));

    c_for(i=1,i<=length(str),i+=1,

    o=ord(slice(str,0,i));

    if (type(o)=='number' && chr(o)==slice(str,0,i),
        res=[o];
        if(i<length(str),put(res, null, ord_string(slice(str,i)), 'extend'));
        return(res)
    );
    )
);

string_iter(str)->(
    if (length(str)<=1,return((split(str))));

    c_for(i=1,i<=length(str),i+=1,

    o=ord(slice(str,0,i));

    if (type(o)=='number' && (ch=chr(o))==slice(str,0,i),
        res=[ch];
        if(i<length(str),put(res, null, string_iter(slice(str,i)), 'extend'));
        return(res)
    );
    )
);

//chr
//based on the base64 standard
__rmap={[0, 0, 0, 0, 0, 0]-> 'A', [0, 0, 0, 0, 0, 1]-> 'B', [0, 0, 0, 0, 1, 0]-> 'C', [0, 0, 0, 0, 1, 1]-> 'D', [0, 0, 0, 1, 0, 0]-> 'E', [0, 0, 0, 1, 0, 1]-> 'F', [0, 0, 0, 1, 1, 0]-> 'G', [0, 0, 0, 1, 1, 1]-> 'H', [0, 0, 1, 0, 0, 0]-> 'I', [0, 0, 1, 0, 0, 1]-> 'J', [0, 0, 1, 0, 1, 0]-> 'K', [0, 0, 1, 0, 1, 1]-> 'L', [0, 0, 1, 1, 0, 0]-> 'M', [0, 0, 1, 1, 0, 1]-> 'N', [0, 0, 1, 1, 1, 0]-> 'O', [0, 0, 1, 1, 1, 1]-> 'P', [0, 1, 0, 0, 0, 0]-> 'Q', [0, 1, 0, 0, 0, 1]-> 'R', [0, 1, 0, 0, 1, 0]-> 'S', [0, 1, 0, 0, 1, 1]-> 'T', [0, 1, 0, 1, 0, 0]-> 'U', [0, 1, 0, 1, 0, 1]-> 'V', [0, 1, 0, 1, 1, 0]-> 'W', [0, 1, 0, 1, 1, 1]-> 'X', [0, 1, 1, 0, 0, 0]-> 'Y', [0, 1, 1, 0, 0, 1]-> 'Z', [0, 1, 1, 0, 1, 0]-> 'a', [0, 1, 1, 0, 1, 1]-> 'b', [0, 1, 1, 1, 0, 0]-> 'c', [0, 1, 1, 1, 0, 1]-> 'd', [0, 1, 1, 1, 1, 0]-> 'e', [0, 1, 1, 1, 1, 1]-> 'f', [1, 0, 0, 0, 0, 0]-> 'g', [1, 0, 0, 0, 0, 1]-> 'h', [1, 0, 0, 0, 1, 0]-> 'i', [1, 0, 0, 0, 1, 1]-> 'j', [1, 0, 0, 1, 0, 0]-> 'k', [1, 0, 0, 1, 0, 1]-> 'l', [1, 0, 0, 1, 1, 0]-> 'm', [1, 0, 0, 1, 1, 1]-> 'n', [1, 0, 1, 0, 0, 0]-> 'o', [1, 0, 1, 0, 0, 1]-> 'p', [1, 0, 1, 0, 1, 0]-> 'q', [1, 0, 1, 0, 1, 1]-> 'r', [1, 0, 1, 1, 0, 0]-> 's', [1, 0, 1, 1, 0, 1]-> 't', [1, 0, 1, 1, 1, 0]-> 'u', [1, 0, 1, 1, 1, 1]-> 'v', [1, 1, 0, 0, 0, 0]-> 'w', [1, 1, 0, 0, 0, 1]-> 'x', [1, 1, 0, 0, 1, 0]-> 'y', [1, 1, 0, 0, 1, 1]-> 'z', [1, 1, 0, 1, 0, 0]-> '0', [1, 1, 0, 1, 0, 1]-> '1', [1, 1, 0, 1, 1, 0]-> '2', [1, 1, 0, 1, 1, 1]-> '3', [1, 1, 1, 0, 0, 0]-> '4', [1, 1, 1, 0, 0, 1]-> '5', [1, 1, 1, 0, 1, 0]-> '6', [1, 1, 1, 0, 1, 1]-> '7', [1, 1, 1, 1, 0, 0]-> '8', [1, 1, 1, 1, 0, 1]-> '9', [1, 1, 1, 1, 1, 0]-> '+', [1, 1, 1, 1, 1, 1]-> '/'};

// 0 … 127 | 0xxxxxxx 
// 128 … 2047 | 110xxxxx 10xxxxxx 
// 2048 … 65535 | 1110xxxx 10xxxxxx 10xxxxxx 
// 65536 … 1114111 | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 
chr(a_num,outer(__rmap))->(
    a_num_=a_num;
    digs=(
    if (a_num<=0,[0],
    res=[];
    while(a_num,4000,(
        //print(a_num);
        r=a_num%2;
        put(res, null, r, 'insert');
        a_num=(a_num-r)/2;
    
    );
    );
    res
    ));
    a_num=a_num_;
    if(a_num<=2047,(
        if(a_num<=127,(
            res=[0,0,0,0,0,0,0,0];p=[7,6,5,4,3,2,1]
        ),(
            res=[1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0];p=[15, 14, 13, 12, 11, 10, 7, 6, 5, 4, 3]
        ))
    ),(
        if(a_num<=65535,(
            res=[1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0];p=[23, 22, 21, 20, 19, 18, 15, 14, 13, 12, 11, 10, 7, 6, 5, 4]
        ),(
            res=[1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0];p=[31, 30, 29, 28, 27, 26, 23, 22, 21, 20, 19, 18, 15, 14, 13, 12, 11, 10, 7, 6, 5]
        ))
    ));
    //print(str(res)+'\n'+str(digs));
    for(digs,(
        res:(p:_i)=_
    ));
    //print(str(res));
    tl='';
    while(length(res)%6,50000,put(res, null, [0,0], 'extend');tl+='=');
    ret='';
    loop(length(res)/6,(
        ret+=__rmap:(slice(res,0,6));
        res=slice(res,6)
    ));
    decode_b64(ret+tl)


);

//test

//__test()->(
//    [ord('a'),ord('A'),ord_string('我'),ord('🚣'),ord('ř'),ord_string('1️⃣')];
//);
//__test2()->(
//    [ord_string('😊'),ord_string('❤️'),ord('🤎'),ord_string('💚'),ord_string('🇧🇷'),ord_string('👩‍❤️‍💋‍👨')]
//);
//__test3()->(
//    [chr(ord('🤎'))=='🤎',chr(ord('🚣'))=='🚣',chr(ord('ř'))=='ř',chr(ord('A')),chr(ord('a')),chr(ord('我')),chr(ord('😊'))=='😊']
//)

